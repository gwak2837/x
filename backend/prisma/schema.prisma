datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               BigInt    @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  logoutAt         DateTime?
  suspendedAt      DateTime?
  unsuspendAt      DateTime?
  suspendedType    Int?      @db.SmallInt
  suspendedReason  String?
  ageRange         Int       @db.SmallInt
  ageRangePublic   Boolean   @default(true)
  bio              String?   @db.VarChar(255)
  birthDate        DateTime? @db.Date
  birthDatePublic  Boolean   @default(true)
  config           Json?
  grade            Int       @default(0) @db.SmallInt
  isPrivate        Boolean   @default(false)
  likedPostPublic  Boolean   @default(true)
  name             String    @unique @db.VarChar(255)
  nameLastModified DateTime?
  nickname         String    @db.VarChar(255)
  profileImageURLs String[]
  sex              Int       @default(0) @db.SmallInt
  sexPublic        Boolean   @default(true)

  oAuth OAuth[]
  posts Post[]

  likedPosts      UserLikePost[]     @relation("likedPosts")
  bookmarkedPosts UserBookmarkPost[] @relation("bookmarkedPosts")
  following       UserFollow[]       @relation("following")
  followers       UserFollow[]       @relation("followers")
}

model UserFollow {
  leaderId   BigInt
  followerId BigInt
  createdAt  DateTime @default(now())
  status     Int      @default(0) @db.SmallInt

  leader   User @relation("following", fields: [leaderId], references: [id])
  follower User @relation("followers", fields: [followerId], references: [id])

  @@id([leaderId, followerId])
}

model OAuth {
  id              String
  provider        Int      @default(0) @db.SmallInt
  createdAt       DateTime @default(now())
  email           String?  @db.VarChar(255)
  profileImageURL String?

  userId BigInt?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@id([id, provider])
  @@index([userId])
}

model Post {
  id        BigInt    @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  publishAt DateTime  @default(now())
  category  Int?      @default(0) @db.SmallInt
  status    Int       @default(0) @db.SmallInt
  content   String?
  imageURLs String[]

  authorId       BigInt?
  parentPostId   BigInt?
  referredPostId BigInt?

  author         User?  @relation(fields: [authorId], references: [id], onDelete: SetNull)
  parentPost     Post?  @relation("PostThread", fields: [parentPostId], references: [id])
  childrenPosts  Post[] @relation("PostThread")
  referredPost   Post?  @relation("PostReference", fields: [referredPostId], references: [id])
  referringPosts Post[] @relation("PostReference")

  hashtags        PostHashtag[]      @relation("hashtags")
  likedUsers      UserLikePost[]     @relation("likedUsers")
  bookmarkedUsers UserBookmarkPost[] @relation("bookmarkedUsers")

  // NOTE: https://dba.stackexchange.com/questions/225271/does-it-make-sense-to-create-an-index-on-foreign-key-uuid-column-in-postgres
  @@index([authorId])
}

model UserLikePost {
  userId BigInt
  postId BigInt

  user User @relation("likedPosts", fields: [userId], references: [id])
  post Post @relation("likedUsers", fields: [postId], references: [id])

  @@id([userId, postId])
}

model UserBookmarkPost {
  userId BigInt
  postId BigInt

  user User @relation("bookmarkedPosts", fields: [userId], references: [id])
  post Post @relation("bookmarkedUsers", fields: [postId], references: [id])

  @@id([userId, postId])
}

model Hashtag {
  id   BigInt @id @default(autoincrement())
  name String @unique @db.VarChar(280)

  posts PostHashtag[] @relation("posts")
}

model PostHashtag {
  postId    BigInt
  hashtagId BigInt

  post    Post    @relation("hashtags", fields: [postId], references: [id])
  hashtag Hashtag @relation("posts", fields: [hashtagId], references: [id])

  @@id([postId, hashtagId])
}
